// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id String @id @default(cuid())
    email String @unique
    phone String
    firstName String
    lastName String
    password String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    bookings Booking[]
}

model Address {
    id String @id @default(cuid())
    address String
    city String
    state String
    zip String
    bookings Booking[]
}

model Cars {
  id String @id @default(cuid())
  make String
  model String
  year String
  price String
  carType carType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookings Booking[]
}

model Booking {
  id String @id @default(cuid())
  userId String
  carId String
  addressId String
  startDate DateTime
  endDate DateTime
  totalPrice Float?
  status String @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  car Cars @relation(fields: [carId], references: [id])
  address Address @relation(fields: [addressId], references: [id])
} 

model Chat{
  id String @id @default(cuid())
  sessionId String
  message String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chatSession ChatSession @relation("ChatSessionMessages", fields: [sessionId], references: [id])
}

model ChatSession{
  id String @id @default(cuid())
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messages Chat[] @relation("ChatSessionMessages")
}

model ChatMessages{
  id String @id @default(cuid())
  chatSessionId String
  message String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum carType{
  Sedan
  SUV
  Truck
  Van
  SportsCar
  Convertible
  Coupe
  Hatchback
  Wagon
}

